Index: C:/usr/src/freehep-trunk/maven-plugins/freehep-nar-plugin/src/main/java/org/freehep/maven/nar/Library.java
===================================================================
--- C:/usr/src/freehep-trunk/maven-plugins/freehep-nar-plugin/src/main/java/org/freehep/maven/nar/Library.java	(revision 9267)
+++ C:/usr/src/freehep-trunk/maven-plugins/freehep-nar-plugin/src/main/java/org/freehep/maven/nar/Library.java	(working copy)
@@ -10,6 +10,12 @@
  */
 public class Library {

+	public static final String STATIC = "static";
+	public static final String SHARED = "shared";
+	public static final String EXECUTABLE = "executable";
+	public static final String JNI = "jni";
+	public static final String PLUGIN = "plugin";
+	
     /**
      * Type of the library to generate.
      * Possible choices are: "plugin", "shared", "static" or "jni".

Index: C:/usr/src/freehep-trunk/maven-plugins/freehep-nar-plugin/src/main/java/org/freehep/maven/nar/NarCompileMojo.java
===================================================================
--- C:/usr/src/freehep-trunk/maven-plugins/freehep-nar-plugin/src/main/java/org/freehep/maven/nar/NarCompileMojo.java	(revision 9267)
+++ C:/usr/src/freehep-trunk/maven-plugins/freehep-nar-plugin/src/main/java/org/freehep/maven/nar/NarCompileMojo.java	(working copy)
@@ -10,6 +10,7 @@
 import net.sf.antcontrib.cpptasks.OutputTypeEnum;
 import net.sf.antcontrib.cpptasks.RuntimeType;
 import net.sf.antcontrib.cpptasks.types.LibrarySet;
+import net.sf.antcontrib.cpptasks.types.LibraryTypeEnum;
 import net.sf.antcontrib.cpptasks.types.SystemLibrarySet;

 import org.apache.maven.artifact.Artifact;
@@ -67,15 +68,23 @@
 		// std c++
 		task.setLinkCPP(library.linkCPP());

-		// outDir
-		File outDir = new File(getTargetDirectory(), "lib");
+		// Output directory.
+		//   "bin" for executables, "lib" for jni, shared, static, plugin?
+		File outDir = new File(
+				getTargetDirectory(), 
+				type.equals( Library.EXECUTABLE ) ? "bin" : "lib"
+				);
+		
 		outDir = new File(outDir, getAOL());
-		outDir = new File(outDir, type);
+		// If executable, place exec directly in {aol} dir without {type} sub dir
+		if ( ! type.equals( Library.EXECUTABLE ) ) 
+			outDir = new File(outDir, type);
 		outDir.mkdirs();

 		// outFile
 		File outFile = new File(outDir, getOutput());
 		if (getLogLevel() >= LOG_LEVEL_INFO) getLog().info("NAR - output: '" + outFile + "'");
+				
 		task.setOutfile(outFile);

 		// object directory
Index: C:/usr/src/freehep-trunk/maven-plugins/freehep-nar-plugin/src/main/java/org/freehep/maven/nar/NarPackageMojo.java
===================================================================
--- C:/usr/src/freehep-trunk/maven-plugins/freehep-nar-plugin/src/main/java/org/freehep/maven/nar/NarPackageMojo.java	(revision 9267)
+++ C:/usr/src/freehep-trunk/maven-plugins/freehep-nar-plugin/src/main/java/org/freehep/maven/nar/NarPackageMojo.java	(working copy)
@@ -3,6 +3,9 @@

 import java.io.File;
 import java.io.IOException;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;

 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.plugin.MojoExecutionException;
@@ -22,11 +25,23 @@
  */
 public class NarPackageMojo extends AbstractNarMojo {

+	/**
+     * List of libraries to create
+     *
+     * @parameter expression=""
+     */
+    private List libraries;
+    
+    protected List getLibraries() {
+        if (libraries == null) libraries = Collections.EMPTY_LIST;
+        return libraries;
+    }
+    
     public void execute() throws MojoExecutionException, MojoFailureException {
     	if (shouldSkip()) return;
     	
-        // FIXME, multiple types should be possible
-        String type = "jni";
+        //String type = ((Library)libs.get(0)).getType(); // "jni";
+        
         NarInfo info = new NarInfo(getMavenProject().getGroupId(), getMavenProject().getArtifactId(), getMavenProject().getVersion());

         // General properties.nar file
@@ -40,9 +55,25 @@
         } catch (IOException ioe) {
             // ignored
         }
-
+        
+    	for ( Iterator i = getLibraries().iterator(); i.hasNext(); )
+    		narLibrary( info, (Library) i.next());
+    	 
+        try {
+            info.writeToFile(propertiesFile);              
+        } catch (IOException ioe) {
+            throw new MojoExecutionException("Cannot write nar properties file", ioe);
+        }
+    }
+    
+    protected void narLibrary( NarInfo info, Library library ) throws MojoExecutionException, MojoFailureException {
+    	String type = library.getType();
         File narDirectory = new File(getOutputDirectory(), "nar");

+        // FIXME hardcoded
+    	// Why only one binding per project?
+        info.setBinding(null, type);
+        
         // noarch
         String include = "include";
         if (new File(narDirectory, include).exists()) {   
@@ -62,15 +93,6 @@
             addNarArtifact(NAR_TYPE, getAOL()+"-"+type, archFile);  
             info.setNar(null, type, getMavenProject().getGroupId()+":"+getMavenProject().getArtifactId()+":"+NAR_TYPE+":"+"${aol}-"+type);
         } 
-        
-        // FIXME hardcoded
-        info.setBinding(null, type);
-        
-        try {
-            info.writeToFile(propertiesFile);              
-        } catch (IOException ioe) {
-            throw new MojoExecutionException("Cannot write nar properties file", ioe);
-        }
     }

     private void nar(File nar, File dir, String[] dirs) throws MojoExecutionException {


	---
FreeHEP NAR Plugin
	---
	---
Mark Donszelmann
	---
	
Introduction

	NOTE: bold print is NOT implemented yet.

	This plugin for Maven 2 allows you to compile native code (c++, c and fortran) on
a number of different architectures (Linux, Windows, MacOSX, Solaris, ...) and with
a number of different compilers/linkers (g++, Microsoft Visual C++, CC, ...)
The output produced is wrapped up in Native ARchive files (.nar) some of which
are machine independent (-noarch), while others are machine specific and thus depend
on a combination of machine architecture(A), operating-system(O) and linker(L) identified
as AOL.
These nar files can be installed in the local maven repository and deployed to a 
standard maven (web) server, using the standard maven-install-plugin and maven-deploy-plugin.

	Other maven projects may specify dependencies on these nar files using the standard
maven dependency declaration. Nar files get downloaded, unpacked and 
installed in the local maven repository, just like jar files are (apart from the
unpacking).
    
	The NAR plugin executes the following goals, in the order below, to create and deploy nar files. 
The goals are part of the
<<<nar>>> packaging/{{{lifecycle.html}lifecycle}}, which inserts the nar goals into the standard lifecyle. Using nar packaging
allows you to build a jar file as well as nar files. The list below shows the sequence of the NAR goals:

    [[1]] {{{#nar-download}nar-download}}
    
    [[2]] {{{#nar-unpack}nar-unpack}}
    
    [[3]] {{{#nar-javah}nar-javah}}
    
    [[4]] {{{#nar-compile}nar:compile}}
    
    [[5]] {{{#nar-testCompile}nar-testCompile}}
    
    [[6]] {{{#nar-test}nar-test}}
    
    [[7]] {{{#nar-package}nar-package}}
    
    [[8]] {{{#nar-integration-test}nar-integration-test}}
    
    [[9]] {{{#install}install (standard maven goal)}}
    
    [[10]] {{{#deploy}deploy (standard maven goal)}}

	[]
	
* Initialization

	The NAR Plugin starts off by setting and deducing all kinds of property values for usage
in the goals below. The configuration section of the NAR plugin allows one to override 
most of the default settings. The default settings come from the AOL properties file 
which allows us to specify different defaults depending on the architecture-os-linker
combination, see {{{aol.html}AOL Properties}}.
                
	The NAR Plugin tries to deduce the "Operating System"
and the "Architecture" of the machine. Both can be overridden by setting <<<os>>>
and <<<arch>>> in the {{{configuration.html}configuration}}.
                
	The name of the linker is looked up in a architecture-os specific way, but can be overridden
by setting <<<linker.name>>> (this means the subtag \<name\> of the \<linker\> tag in the
configuration section). Now that the linker name is known
all other properties are looked up with a prefix of <<<[arch.[os.[linker.]]]>>> from the AOL Properties
file, but can be overridden in the configuration section (which can be made AOL specific by
putting it inside a profile.
               
   
* {nar-download}

	Your NAR artifact(s) may be dependent on other nar artifacts. The standard maven dependency 
declaration in the POM is used to describe such dependencies, see {{{nar-dependencies.html}
nar-dependencies}}. By the time this goal is running maven will have already downloaded 
all dependent jar files some of which may include a nar.properties file. 
This property file contains information on what other machine dependent and machine independent nar files to download.
This goal will download any further necessary nar files into the local repository.
                                            
* {nar-unpack}

	Since a nar file is of no use to any native compilation process the nar-unpack goal unpacks the nar into
the "nar" subdirectory of the local repository. A flag is set not to download and unpack this nar file again, 
except if it is a SNAPSHOT artifact. <<TBD The actual nar file is deleted to preserve diskspace.>>
                
* {nar-javah}
                
	This goal will run the javah tool on any class file in the <<<javah.classDirectory>>> directory
that has native methods in it. The actual class files are inspected (rather than their sources).
The javah tool is picked up from the java installation and is run with a classpath of the
<<<javah.classDirectory>>> and all depencies' classpaths, unless you specify a list in <<<javah.classPaths>>>. 
You can also set a boot classpath using <<<javah.bootClassPaths>>>.

	This goal has no effect if there are no java sources, or if none of the java classes contain a native
method.
                
* {nar-compile}
                
	This goal will compile the native source code (c, c++ or fortran) and archive it into a shared library.
You can also produce jni or a static library by setting <<<library.type>>>.
To handle the variety of compilers and linkers, the NAR plugin uses the cpptasks from the ant-contrib
project, with some minor improvements and additions of compilers, see {{{cpptasks.html}cpptasks}}.
Most of the settings for cpptasks, such as compiler, linker, options and include dirs are available
through the NAR plugin, see {{{configuration.html}configuration}}.

	The compiler will automatically select the correct compiler (c, c++ or fortran) based on the type of
sources, as specified in the patterns in <<<AOL.c.includes>>>, 
<<<AOL.nar.src.includes>>> and <<<AOL.fortran.includes>>>, where AOL is a dotted qualifier of the architecture,
os and linker (x86.Windows.msvc for example).

	Include paths are added in this order from:

    * any directories set in <<<COMPILER.includePaths>>>, where COMPILER is cpp, c or fortran.

    * the <<<javah.jniDirectory>>>.

    * only if <<<java.include>>> is true or if <<<javah.jniDirectory>>>
    exists we add one of the following, relative to the java home directory:
    
    	* <<<java.includePaths>>> if set,
    	
    	* otherwise the <<<AOL.java.include>>> property from the AOL properties.
    	
    	[]
    
    
    * the header files of any of the nar type dependencies, unless it is a jni library.
    
    * any system directories set in <<<COMPILER.sysincludepath>>>, where COMPILER is cpp, c or fortran.

	[]

	The static or dynamic library is linked against:

    * the list of libraries set in <<<linker.libs>>>. Using nar dependencies is preferred though.
    
    * the libraries of any of the nar type dependencies.
    
    * the java virtual machine if you set
    <<<java.link>>> to true. The location of the runtime can be overridden in <<<java.runtimeDirectory>>>.

	[]

	All include files from <<<COMPILER.includePaths>>> are copied to be included
in the noarch nar file.

	<< TBD If you set freehep.nar.includefilesonly to true the compilation step will be 
skipped. This flag can be used if you want to distribute a library that only contains pure
abstract classes in include files.>>
                

* {nar-testCompile}
                
	This goal compiles a lists of tests from <<<freehep.nar.tests>>>. The source for the tests
can be in any of the supported languages. The include paths and libraries to compile and link with
are the same as under the compile goal, except that the include dir and library of the artifact
produced by the compile goal is also added.


	If you set <<<freehep.nar.includefilesonly>>> to true the compile-tests goal will be 
skipped.

A special flag is set
to make sure the compile and compile-tests goals will include the necessary header file directories 
of both the generated header files and the java virtual machine header files.

* {nar-test}
           
                
* {nar-package}                
   
	This goal creates the artifact nar file(s). The following nar files are created by default:

    * <Artifact>-nar-<version>.nar, a property file describing the behaviour of the 
    library and other nar files available. For a description see {{{nar-dependencies.html}
    nar-dependencies}}.
    
    * <Artifact>-nar-<version>.noarch.nar, a compressed jar file containing non machine
    specific parts of the distribution, such as the include directories.
    
    * <Artifact>-nar-<version>.<aol>.nar, a compressed jar file containing machine
    specific parts of the distribution, such as the libraries. This file is specific to a particular
    Architecture-OS-Linker (aol) combination and is not generated if <<<freehep.nar.includefilesonly>>>
    is set.
    
    []

* {nar-integration-test}
                
                
* {install}                

	This goal installs the produced artifacts in your local repository. The unpacking is done in the 
unpack goal of a dependent artifact upon first usage.


* {deploy}
                
	This goal deploys the produced artifacts on a maven (web) server.	
